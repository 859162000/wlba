// Generated by CoffeeScript 1.9.3
(function() {
  define(['jquery'], function($) {
    var calculate, checkInput, p2pCalculate;
    calculate = function(amount, rate, period, pay_method) {
      var month_rate, rate_pow, result, term_amount;
      if (/等额本息/ig.test(pay_method)) {
        month_rate = rate / 12;
        rate_pow = Math.pow(1 + month_rate, period);
        term_amount = amount * (month_rate * rate_pow) / (rate_pow - 1);
        term_amount = term_amount.toFixed(2);
        result = (term_amount * period - amount).toFixed(2);
      } else if (/日计息/ig.test(pay_method)) {
        result = amount * rate * period / 360;
      } else {
        result = amount * rate * period / 12;
      }
      return Math.floor(result * 100) / 100;
    };
    $('input[data-role=earning-calculator]').keyup(function(e) {
      var amount, earning, earning_element, earning_elements, i, j, len, period, periods, rate, results, target, unit;
      target = $(e.target);
      rate = target.attr('data-rate');
      periods = (target.attr('data-period')).split(',');
      amount = target.val();
      unit = target.attr('data-unit');
      if (unit) {
        amount = amount * unit;
      } else {
        amount = amount * 10000;
      }
      earning_elements = (target.attr('data-target')).split(',');
      results = [];
      for (i = j = 0, len = earning_elements.length; j < len; i = ++j) {
        earning_element = earning_elements[i];
        period = periods[i];
        earning = (rate / 100 * amount / 365 * period).toFixed(1);
        if (earning && $.isNumeric(earning)) {
          results.push($(earning_element).text(earning));
        } else {
          results.push($(earning_element).text("0.0"));
        }
      }
      return results;
    });
    $('input[data-role=fee-calculator]').keyup(function() {
      return $('#withdraw-input').next().text('');
    });
    $('input[data-role=fee-calculator]').blur(function() {
      return checkInput();
    });
    $('#card-select').change(function() {
      return checkInput();
    });
    checkInput = function() {
      var amount, target;
      target = $('#withdraw-input');
      amount = target.val();
      return $.ajax({
        url: "/api/fee/",
        type: "POST",
        data: {
          card_id: $('.bindingCard').attr('id'),
          amount: amount
        }
      }).success(function(xhr) {
        var strs;
        target.next().text('');
        $('#card-select').next().text('');
        if (xhr.ret_code > 0) {
          if (xhr.ret_code === 30137) {
            return $('#card-select').next().text(xhr.message);
          } else {
            target.next().text(xhr.message);
            return target.next().show();
          }
        } else {
          if ((xhr.fee === 0) && (xhr.management_fee === 0 || xhr.management_fee === '0')) {
            strs = 0;
          } else if (xhr.fee !== 0 && (xhr.management_fee === 0 || xhr.management_fee === '0')) {
            strs = xhr.fee;
          } else {
            strs = xhr.fee + '+' + xhr.management_fee;
          }
          $('#poundage').text(strs);
          return $('#actual-amount').text(xhr.actual_amount);
        }
      });
    };
    p2pCalculate = function() {
      var activity_jiaxi, activity_rate, amount, earning, earning_element, earning_elements, existing, fee_earning, fee_element, fee_elements, i, j, k, len, len1, pay_method, period, rate, results, target;
      target = $('input[data-role=p2p-calculator]');
      existing = parseFloat(target.attr('data-existing'));
      period = target.attr('data-period');
      rate = target.attr('data-rate');
      rate = rate / 100;
      pay_method = target.attr('data-paymethod');
      activity_rate = parseFloat(target.attr('activity-rate')) ? parseFloat(target.attr('activity-rate')) : 0;
      activity_jiaxi = parseFloat(target.attr('activity-jiaxi'));
      activity_rate = (activity_rate + activity_jiaxi) / 100;
      amount = parseFloat(target.val()) || 0;
      if (amount > target.attr('data-max')) {
        amount = target.attr('data-max');
        target.val(amount);
      }
      amount = parseFloat(existing) + parseFloat(amount);
      earning = calculate(amount, rate, period, pay_method);
      fee_earning = calculate(amount, activity_rate, period, pay_method);
      if (earning < 0) {
        earning = 0;
      }
      earning_elements = (target.attr('data-target')).split(',');
      fee_elements = (target.attr('fee-target')).split(',');
      for (i = j = 0, len = earning_elements.length; j < len; i = ++j) {
        earning_element = earning_elements[i];
        if (earning && $.isNumeric(earning)) {
          $(earning_element).text(earning);
        } else {
          $(earning_element).text("0.00");
        }
      }
      results = [];
      for (i = k = 0, len1 = fee_elements.length; k < len1; i = ++k) {
        fee_element = fee_elements[i];
        if (fee_earning && $.isNumeric(fee_earning)) {
          $(fee_element).text(fee_earning);
          results.push($('#vip-income-warp').show());
        } else {
          results.push($(fee_element).text("0.00"));
        }
      }
      return results;
    };
    $('input[data-role=p2p-calculator]').keyup(function(e) {
      return p2pCalculate();
    });
    $('input[data-role=p2p-calculator]').keyup();
    return {
      calculate: calculate,
      p2pCalculate: p2pCalculate
    };
  });

}).call(this);
