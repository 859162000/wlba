// Generated by CoffeeScript 1.7.1
(function() {
  require.config({
    paths: {
      jquery: 'lib/jquery.min',
      underscore: 'lib/underscore-min',
      knockout: 'lib/knockout-3.0.0',
      'jquery.modal': 'lib/jquery.modal.min',
      purl: 'lib/purl'
    },
    shim: {
      'jquery.modal': ['jquery'],
      purl: ['jquery']
    }
  });

  require(['jquery', 'underscore', 'knockout', 'lib/backend', 'jquery.modal', 'purl', 'model/portfolio', 'model/trustTable', 'model/financingTable', 'model/cashTable', 'model/fundTable', 'model/fund', 'model/emptyTable'], function($, _, ko, backend, modal, purl, portfolio, trustTable, financingTable, cashTable, fundTable, fund, emptyTable) {
    var ViewModel, model;
    ViewModel = (function() {
      function ViewModel() {
        var asset_param, self;
        self = this;

        /*
        The user data: asset, risk, period
         */
        asset_param = parseInt($.url(document.location.href).param('asset'));
        if (isNaN(asset_param) || asset_param <= 0) {
          asset_param = 30;
        }
        self.asset = ko.observable(asset_param);
        self.riskScore = ko.observable(null);
        self.period = ko.observable(6);
        self.finishSurvey = function(data, event) {
          var asset, period, risk;
          asset = self.questions[0].answer();
          if (asset && parseInt(asset) > 0) {
            self.asset(parseInt(asset));
          }
          period = self.questions[1].answer();
          if (period && parseInt(period) > 0) {
            self.period(period);
          }
          risk = self.questions[2].answer();
          if (risk) {
            self.riskScore(risk.value.risk_score);
          }
          return $.modal.close();
        };
        self.questions = [
          {
            question: '您的可投资资产是多少？',
            answer: ko.observable(),
            input: {
              suffix: '万元'
            }
          }, {
            question: '可以投资的期限是？',
            answer: ko.observable(),
            input: {
              suffix: '个月'
            }
          }, {
            question: '您的投资目标是？',
            answer: ko.observable(),
            options: [
              {
                title: '不能承担任何风险',
                value: {
                  risk_score: 2
                }
              }, {
                title: '可承担一定的风险来换取较高的收益',
                value: {
                  risk_score: 3
                }
              }, {
                title: '可以承担很大的风险来追求高收益',
                value: {
                  risk_score: 4
                }
              }, {
                title: '绝对追求高收益',
                value: {
                  risk_score: 5
                }
              }
            ]
          }
        ];

        /*
        The portfolio related stuff
         */
        self.portfolios = ko.observableArray([]);
        ko.computed(function() {
          var params;
          params = {
            asset_min: self.asset(),
            asset_max: self.asset(),
            period_min: self.period(),
            period_max: self.period(),
            risk_score: self.riskScore()
          };
          return backend.loadPortfolio(params).done(function(data) {
            var portfolios;
            portfolios = _.map(data.results, function(data) {
              return new portfolio.viewModel({
                data: data,
                asset: self.asset,
                events: {
                  productSelected: function(value, portfolio) {
                    var amount, p, type, _i, _len, _ref;
                    _ref = self.portfolios();
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      p = _ref[_i];
                      if (p !== portfolio) {
                        p.selectedProduct(null);
                      }
                    }
                    type = value.product.name;
                    self.productsType(type);
                    amount = value.value;
                    if (value.type === 'percent') {
                      amount = amount / 100 * self.asset();
                    }
                    return self.amount(amount);
                  }
                }
              });
            });
            return self.portfolios(portfolios);
          });
        }).extend({
          throttle: 1
        });

        /*
        The filtered products related stuff
         */
        self.trustTable = new trustTable.viewModel({});
        self.financingTable = new financingTable.viewModel({});
        self.cashTable = new cashTable.viewModel({});
        self.fundTable = new fundTable.viewModel({});
        self.emptyTable = new emptyTable.viewModel({});
        self.dataTable = ko.observable();
        self.productsType = ko.observable();
        self.amount = ko.observable(0);
        ko.computed(function() {
          var amount, params, type;
          type = self.productsType();
          amount = self.amount();
          if (backend.isValidType(type)) {
            params = {
              count: 5,
              lte_threshold: amount
            };
            return backend.loadData(type, params).done(function(data) {
              var normalizedType;
              if (data.results.length > 0) {
                normalizedType = backend.normalizeType(type);
                switch (normalizedType) {
                  case 'trusts':
                    self.trustTable.data(data.results);
                    return self.dataTable(self.trustTable);
                  case 'bank_financings':
                    self.financingTable.data(data.results);
                    return self.dataTable(self.financingTable);
                  case 'cashes':
                    self.cashTable.data(data.results);
                    return self.dataTable(self.cashTable);
                  case 'funds':
                    self.fundTable.data(_.map(data.results, function(item) {
                      return new fund.viewModel({
                        data: item
                      });
                    }));
                    return self.dataTable(self.fundTable);
                  default:
                    return self.dataTable(self.emptyTable);
                }
              }
            });
          } else {
            if (typeof console !== "undefined" && console !== null) {
              console.log('The type not supported');
            }
            return self.dataTable(self.emptyTable);
          }
        }).extend({
          throttle: 1
        });
      }

      return ViewModel;

    })();
    model = new ViewModel();
    return ko.applyBindings(model);
  });

}).call(this);

//# sourceMappingURL=consult.map
